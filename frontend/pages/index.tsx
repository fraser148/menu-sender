import type { NextPage } from 'next'
import Head from 'next/head'
import {
  FormControl,
  FormLabel,
  FormErrorMessage,
  FormHelperText,
  Input,
  Button,
  Box,
  Container,
  Text,
  useToast
} from '@chakra-ui/react'
import { Formik, Form, Field } from 'formik'
import Layout from '../components/layout'

const Home: NextPage = () => {

  function validateEmail(value : string) {
    let error
    if (!value) {
      error = 'Required';
    } else if (!/^[A-Z0-9._%+-]+@exeter.ox.ac.uk$/i.test(value)) {
      error = 'Invalid email address';
    }
    return error
  }
  function validateName(value : string) {
    let error
    if (!value) {
      error = 'Required';
    } else if (!/^[a-zA-Z][a-zA-Z'\- ]+[a-zA-Z]$/i.test(value)) {
      error = 'Something`s up with that name...';
    }
    return error
  }
  const toast = useToast()

  interface CheckRes {
    matchedCount: number
  }
  
  return (
    <Layout>
        <Head>
          <title>Exeter Catering Dinner Email Signup</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Container centerContent maxW='container.l' p={0}>
          <Text 
            bgGradient='linear(to-l, orange.400, orange.500)'
            bgClip='text'
            fontSize='6xl'
            fontWeight='extrabold'
          >Sign up</Text>
          <Box my={6} w={"sm"} maxW={"100%"} borderRadius={12} borderWidth='1px' p={6} >
            <Formik
              initialValues={{ name: "", email : "", referral: ""}}
              onSubmit = { async (values : { name: string, email: string, referral: string }, actions) => {
                let route = [process.env.API_LEAD, "/api/emails"].join('')
                let data_to_send : any = {
                  name: values.name,
                  email : values.email
                }
                if (values.referral != "") {
                  data_to_send.referral = values.referral
                }
                let res = await fetch(route, {
                    method: "POST",
                    body: JSON.stringify(data_to_send),
                })
                let data : CheckRes = await res.json();
                if (data.matchedCount === 1) {
                  let name = values.email.split(".")[0];
                  name = name.charAt(0).toUpperCase() + name.slice(1);
                  toast({
                    title: 'Oops ' + name,
                    description: "Looks like you're already on the list.",
                    status: 'warning',
                    duration: 9000,
                    isClosable: true,
                  })
                } else {
                  let name = values.email.split(".")[0];
                  name = name.charAt(0).toUpperCase() + name.slice(1);
                  toast({
                    title: 'That was a success ' + name,
                    description: "You'll start receiveing emails tomorrow.",
                    status: 'success',
                    duration: 9000,
                    isClosable: true,
                  })
                }
                setTimeout(() => {
                  actions.setSubmitting(false)
                  actions.resetForm({
                    values: {
                      name: '',
                      email: '',
                      referral: ''
                    },
                  });
                }, 1000)
              }}
            >
              {(props) => (
                <Form>
                  <Field name='name' validate={validateName}>
                    {({ field, form } : {field: any, form: any}) => (
                      <>
                      <FormControl isInvalid={form.errors.name && form.touched.name}>
                        <FormLabel htmlFor='name'>Your Name</FormLabel>
                        <Input {...field} type="name" id='name' placeholder='John Smith' />
                        <FormErrorMessage>{form.errors.name}</FormErrorMessage>
                      </FormControl>
                      </>
                    )}
                  </Field>
                  <Field name='email' validate={validateEmail}>
                    {({ field, form } : {field: any, form: any}) => (
                      <>
                      <FormControl isInvalid={form.errors.email && form.touched.email}>
                        <FormLabel htmlFor='email' mt={4}>College Email Address</FormLabel>
                        <Input {...field} type="email" id='email' placeholder='College Email' />
                        <FormHelperText>the one ending in @exeter.ox.ac.uk</FormHelperText>
                        <FormErrorMessage>{form.errors.email}</FormErrorMessage>
                      </FormControl>
                      </>
                    )}
                  </Field>
                  <Field name='referral'>
                    {({ field, form } : {field: any, form: any}) => (
                      <>
                      <FormControl isInvalid={form.errors.referral && form.touched.referral}>
                        <FormLabel htmlFor='referral' mt={4}>Referral Name (optional)</FormLabel>
                        <Input {...field} type="referral" id='referral' placeholder='Cool Student' />
                        <FormErrorMessage>{form.errors.referral}</FormErrorMessage>
                      </FormControl>
                      </>
                    )}
                  </Field>
                  <Button
                    mt={4}
                    colorScheme='orange'
                    isLoading={props.isSubmitting}
                    type='submit'
                    loadingText='Submitting'
                  >
                    Submit
                  </Button>
                </Form>
              )}
            </Formik>
          </Box>
        </Container>
    </Layout>
  )
}

export default Home
